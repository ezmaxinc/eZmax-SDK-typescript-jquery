/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.31
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class ObjectEzsigndocumentApi {
    protected basePath = 'https://prod.api.appcluster01.ca-central-1.ezmax.com/rest';
    public defaultHeaders: Array<string> = [];
    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = undefined;
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        if (defaultExtraJQueryAjaxSettings) {
            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;
        }
    }

    private extendObj<T1 extends object, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @summary Apply an Ezsign Template to the Ezsigndocument.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param ezsigndocumentApplyEzsigntemplateV1Request 
     */
    public ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID: number, ezsigndocumentApplyEzsigntemplateV1Request: models.EzsigndocumentApplyEzsigntemplateV1Request, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.EzsigndocumentApplyEzsigntemplateV1Response;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate'.replace('{' + 'pkiEzsigndocumentID' + '}', encodeURIComponent(String(pkiEzsigndocumentID)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
        if (pkiEzsigndocumentID === null || pkiEzsigndocumentID === undefined) {
            throw new Error('Required parameter pkiEzsigndocumentID was null or undefined when calling ezsigndocumentApplyEzsigntemplateV1.');
        }

        // verify required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is not null or undefined
        if (ezsigndocumentApplyEzsigntemplateV1Request === null || ezsigndocumentApplyEzsigntemplateV1Request === undefined) {
            throw new Error('Required parameter ezsigndocumentApplyEzsigntemplateV1Request was null or undefined when calling ezsigndocumentApplyEzsigntemplateV1.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(ezsigndocumentApplyEzsigntemplateV1Request);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.EzsigndocumentApplyEzsigntemplateV1Response;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.EzsigndocumentApplyEzsigntemplateV1Response, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @summary Create a new Ezsigndocument
     * @param modelsEzsigndocumentCreateObjectV1Request 
     */
    public ezsigndocumentCreateObjectV1(modelsEzsigndocumentCreateObjectV1Request: Array<models.EzsigndocumentCreateObjectV1Request>, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.EzsigndocumentCreateObjectV1Response;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/1/object/ezsigndocument';

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'modelsEzsigndocumentCreateObjectV1Request' is not null or undefined
        if (modelsEzsigndocumentCreateObjectV1Request === null || modelsEzsigndocumentCreateObjectV1Request === undefined) {
            throw new Error('Required parameter modelsEzsigndocumentCreateObjectV1Request was null or undefined when calling ezsigndocumentCreateObjectV1.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(modelsEzsigndocumentCreateObjectV1Request);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.EzsigndocumentCreateObjectV1Response;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.EzsigndocumentCreateObjectV1Response, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * 
     * @summary Delete an existing Ezsigndocument
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument
     */
    public ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID: number, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.EzsigndocumentDeleteObjectV1Response;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/1/object/ezsigndocument/{pkiEzsigndocumentID}'.replace('{' + 'pkiEzsigndocumentID' + '}', encodeURIComponent(String(pkiEzsigndocumentID)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
        if (pkiEzsigndocumentID === null || pkiEzsigndocumentID === undefined) {
            throw new Error('Required parameter pkiEzsigndocumentID was null or undefined when calling ezsigndocumentDeleteObjectV1.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'DELETE',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.EzsigndocumentDeleteObjectV1Response;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.EzsigndocumentDeleteObjectV1Response, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument\'s children IDs
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument
     */
    public ezsigndocumentGetChildrenV1(pkiEzsigndocumentID: number, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body?: any;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getChildren'.replace('{' + 'pkiEzsigndocumentID' + '}', encodeURIComponent(String(pkiEzsigndocumentID)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
        if (pkiEzsigndocumentID === null || pkiEzsigndocumentID === undefined) {
            throw new Error('Required parameter pkiEzsigndocumentID was null or undefined when calling ezsigndocumentGetChildrenV1.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body?: any;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @summary Retrieve a URL to download documents.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. 
     */
    public ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID: number, eDocumentType: 'Initial' | 'Signed' | 'Proof' | 'Proofdocument', extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.EzsigndocumentGetDownloadUrlV1Response;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}'.replace('{' + 'pkiEzsigndocumentID' + '}', encodeURIComponent(String(pkiEzsigndocumentID))).replace('{' + 'eDocumentType' + '}', encodeURIComponent(String(eDocumentType)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
        if (pkiEzsigndocumentID === null || pkiEzsigndocumentID === undefined) {
            throw new Error('Required parameter pkiEzsigndocumentID was null or undefined when calling ezsigndocumentGetDownloadUrlV1.');
        }

        // verify required parameter 'eDocumentType' is not null or undefined
        if (eDocumentType === null || eDocumentType === undefined) {
            throw new Error('Required parameter eDocumentType was null or undefined when calling ezsigndocumentGetDownloadUrlV1.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.EzsigndocumentGetDownloadUrlV1Response;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.EzsigndocumentGetDownloadUrlV1Response, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * 
     * @summary Retrieve an existing Ezsigndocument
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument
     */
    public ezsigndocumentGetObjectV1(pkiEzsigndocumentID: number, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.EzsigndocumentGetObjectV1Response;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/1/object/ezsigndocument/{pkiEzsigndocumentID}'.replace('{' + 'pkiEzsigndocumentID' + '}', encodeURIComponent(String(pkiEzsigndocumentID)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'pkiEzsigndocumentID' is not null or undefined
        if (pkiEzsigndocumentID === null || pkiEzsigndocumentID === undefined) {
            throw new Error('Required parameter pkiEzsigndocumentID was null or undefined when calling ezsigndocumentGetObjectV1.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.EzsigndocumentGetObjectV1Response;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.EzsigndocumentGetObjectV1Response, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

}
